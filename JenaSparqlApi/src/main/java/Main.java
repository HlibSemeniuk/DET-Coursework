import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.ObjectNode;
import io.javalin.Javalin;
import org.apache.jena.rdf.model.*;
import org.apache.jena.query.*;
import org.apache.jena.reasoner.*;
import org.apache.jena.reasoner.rulesys.GenericRuleReasoner;
import org.apache.jena.reasoner.rulesys.Rule;
import org.apache.jena.update.*;

import java.io.*;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.concurrent.atomic.AtomicReference;
import java.util.stream.Collectors;

public class Main {
    public static void main(String[] args) {
        Javalin app = Javalin.create().start(8081);

        AtomicReference<String> filePath = new AtomicReference<>("");
        app.post("/path", ctx -> {
            filePath.set(ctx.body());
        });


        // SWRL-–ø—Ä–∞–≤–∏–ª–∞
        String rulesText = """
            [rule_monograph:
              (?pub rdf:type <http://www.semanticweb.org/user/ontologies/2025/1/untitled-ontology-2#–ù–∞—É–∫–æ–≤–∞_–ü—É–±–ª—ñ–∫–∞—Ü—ñ—è>)
              (?pub <http://www.semanticweb.org/user/ontologies/2025/1/untitled-ontology-2#–∫—ñ–ª—å–∫—ñ—Å—Ç—å_—Å—Ç–æ—Ä—ñ–Ω–æ–∫_–Ω–∞_–∞–≤—Ç–æ—Ä–∞> ?pagesPerAuthor)
              greaterThan(?pagesPerAuthor, 24.99)
              ->
              (?pub rdf:type <http://www.semanticweb.org/user/ontologies/2025/1/untitled-ontology-2#–ú–æ–Ω–æ–≥—Ä–∞—Ñ—ñ—è>)
            ]
            
            [rule_dissertation:
              (?pub rdf:type <http://www.semanticweb.org/user/ontologies/2025/1/untitled-ontology-2#–ù–∞—É–∫–æ–≤–∞_–ü—É–±–ª—ñ–∫–∞—Ü—ñ—è>)
              (?pub <http://www.semanticweb.org/user/ontologies/2025/1/untitled-ontology-2#–∫—ñ–ª—å–∫—ñ—Å—Ç—å_—Å—Ç–æ—Ä—ñ–Ω–æ–∫> ?pages)
              (?pub <http://www.semanticweb.org/user/ontologies/2025/1/untitled-ontology-2#–∫—ñ–ª—å–∫—ñ—Å—Ç—å_—Å—Ç–æ—Ä—ñ–Ω–æ–∫_–Ω–∞_–∞–≤—Ç–æ—Ä–∞> ?pagesPerAuthor)
              greaterThan(?pages, 79.99)
              lessThan(?pagesPerAuthor, 24.99)
              ->
              (?pub rdf:type <http://www.semanticweb.org/user/ontologies/2025/1/untitled-ontology-2#–î–∏—Å–µ—Ä—Ç–∞—Ü—ñ—è>)
            ]
            
            [rule_article:
              (?pub rdf:type <http://www.semanticweb.org/user/ontologies/2025/1/untitled-ontology-2#–ù–∞—É–∫–æ–≤–∞_–ü—É–±–ª—ñ–∫–∞—Ü—ñ—è>)
              (?pub <http://www.semanticweb.org/user/ontologies/2025/1/untitled-ontology-2#–∫—ñ–ª—å–∫—ñ—Å—Ç—å_—Å—Ç–æ—Ä—ñ–Ω–æ–∫> ?pages)
              (?pub <http://www.semanticweb.org/user/ontologies/2025/1/untitled-ontology-2#–∫—ñ–ª—å–∫—ñ—Å—Ç—å_—Å—Ç–æ—Ä—ñ–Ω–æ–∫_–Ω–∞_–∞–≤—Ç–æ—Ä–∞> ?pagesPerAuthor)
              lessThan(?pages, 79.99)
              greaterThan(?pages, 3.99)
              lessThan(?pagesPerAuthor, 24.99)
              ->
              (?pub rdf:type <http://www.semanticweb.org/user/ontologies/2025/1/untitled-ontology-2#–°—Ç–∞—Ç—Ç—è>)
            ]
            """;

        // –ü–∞—Ä—Å–∏–Ω–≥ –ø—Ä–∞–≤–∏–ª
        List<Rule> rules = Rule.parseRules(rulesText);
        System.out.println("–í–±—É–¥–æ–≤–∞–Ω—ñ –ø—Ä–∞–≤–∏–ª–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ:");
        rules.forEach(System.out::println);


        // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è reasoner
        Reasoner reasoner = new GenericRuleReasoner(rules);
        reasoner.setDerivationLogging(true);

        app.post("/query", ctx -> {
            String sparql = ctx.body();

            // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è RDF-–º–æ–¥–µ–ª—ñ
            Model rawModel = ModelFactory.createDefaultModel();
            try (FileInputStream fis = new FileInputStream(filePath.get())) {
                rawModel.read(fis, null, "TTL");
            }

            try {

                // –í–∏–∫–æ–Ω–∞–Ω–Ω—è UPDATE
                Dataset dataset = DatasetFactory.create(rawModel);
                UpdateRequest update = UpdateFactory.create(sparql);
                UpdateAction.execute(update, dataset);

                // C—Ç–≤–æ—Ä–µ–Ω–Ω—è infModel
                InfModel infModel = ModelFactory.createInfModel(reasoner, rawModel);

                // –û–±'—î–¥–Ω–∞–Ω–Ω—è raw + –¥–µ–¥—É–∫–æ–≤–∞–Ω–∏—Ö —Ñ–∞–∫—Ç—ñ–≤
                Model fullModel = ModelFactory.createUnion(rawModel, infModel.getDeductionsModel());

                // –ó–∞–ø–∏—Å –æ–±'—î–¥–Ω–∞–Ω–æ—ó –º–æ–¥–µ–ª—ñ —É —Ñ–∞–π–ª
                try (FileOutputStream out = new FileOutputStream(filePath.get())) {
                    fullModel.write(out, "TTL");
                }

                ctx.result("RDF-—Ñ–∞–π–ª –æ–Ω–æ–≤–ª–µ–Ω–æ —Ç–∞ –ø—Ä–∞–≤–∏–ª–∞ –∑–∞—Å—Ç–æ—Å–æ–≤–∞–Ω—ñ").status(200);

            } catch (Exception e) {
                ctx.status(400).result("–ü–æ–º–∏–ª–∫–∞ SPARQL-–∑–∞–ø–∏—Ç—É: " + e.getMessage());
            }
        });

        app.post("/selectAll", ctx -> {
            String sparql = ctx.body();

            // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è RDF-–º–æ–¥–µ–ª—ñ
            Model rawModel = ModelFactory.createDefaultModel();
            try (FileInputStream fis = new FileInputStream(filePath.get())) {
                rawModel.read(fis, null, "TTL");
            }

            // C—Ç–≤–æ—Ä–µ–Ω–Ω—è infModel
            InfModel infModel = ModelFactory.createInfModel(reasoner, rawModel);

            Query query = QueryFactory.create(sparql);
            try (QueryExecution qexec = QueryExecutionFactory.create(query, infModel)) {
                ResultSet rs = qexec.execSelect();

                ObjectMapper mapper = new ObjectMapper();

                // –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ –∫–æ–∂–Ω–∏–π —Ä—è–¥–æ–∫ —É JSON-–æ–±‚Äô—î–∫—Ç
                ArrayNode arr = mapper.createArrayNode();
                while (rs.hasNext()) {
                    QuerySolution sol = rs.next();


                    ObjectNode obj = mapper.createObjectNode();
                    obj.put("Title",      sol.getLiteral("–Ω–∞–∑–≤–∞").getString());
                    obj.put("Type",       sol.getLiteral("—Ç–∏–ø–ù–∞–∑–≤–∞").getString());
                    obj.put("PublicationDate", sol.getLiteral("–¥–∞—Ç–∞").getString());
                    obj.put("PageCount",  sol.contains("—Å—Ç–æ—Ä—ñ–Ω–æ–∫") ? sol.getLiteral("—Å—Ç–æ—Ä—ñ–Ω–æ–∫").getInt() : 0);
                    obj.put("AuthorCount",sol.contains("–∞–≤—Ç–æ—Ä—ñ–≤") ? sol.getLiteral("–∞–≤—Ç–æ—Ä—ñ–≤").getInt() : 0);
                    obj.put("PagePerAuthor", sol.contains("—Å—Ç–æ—Ä—ñ–Ω–æ–∫–ù–∞–ê–≤—Ç–æ—Ä–∞")
                            ? sol.getLiteral("—Å—Ç–æ—Ä—ñ–Ω–æ–∫–ù–∞–ê–≤—Ç–æ—Ä–∞").getDouble() : 0.0);
                    obj.put("Language",   sol.contains("–º–æ–≤–∞") ? sol.getLiteral("–º–æ–≤–∞").getString() : "");
                    obj.put("Journal",    sol.contains("–∂—É—Ä–Ω–∞–ª–ù–∞–∑–≤–∞") ? sol.getLiteral("–∂—É—Ä–Ω–∞–ª–ù–∞–∑–≤–∞").getString() : "");

                    String authorsCsv = sol.contains("–ê–≤—Ç–æ—Ä–∏") ? sol.getLiteral("–ê–≤—Ç–æ—Ä–∏").getString() : "";
                    List<String> authors = Arrays.stream(authorsCsv.split("\\s*,\\s*"))
                            .filter(s -> !s.isBlank())
                            .map(String::trim)
                            .collect(Collectors.toList());
                    obj.putPOJO("Authors", authors);

                    String fieldsCsv = sol.contains("–ì–∞–ª—É–∑—ñ") ? sol.getLiteral("–ì–∞–ª—É–∑—ñ").getString() : "";
                    List<String> fields = Arrays.stream(fieldsCsv.split("\\s*,\\s*"))
                            .filter(s -> !s.isBlank())
                            .map(String::trim)
                            .collect(Collectors.toList());
                    obj.putPOJO("Fields", fields);

                    String kwsCsv = sol.contains("–ö–ª—é—á–æ–≤—ñ_—Å–ª–æ–≤–∞") ? sol.getLiteral("–ö–ª—é—á–æ–≤—ñ_—Å–ª–æ–≤–∞").getString() : "";
                    List<String> keywords = Arrays.stream(kwsCsv.split("\\s*,\\s*"))
                            .filter(s -> !s.isBlank())
                            .map(String::trim)
                            .collect(Collectors.toList());
                    obj.putPOJO("Keywords", keywords);

                    arr.add(obj);
                }

                // –í—ñ–¥–¥–∞—î–º–æ JSON-–º–∞—Å–∏–≤
                ctx.json(arr);
            }

        });

        System.out.println("üü¢ –°–µ—Ä–≤–µ—Ä –ø—Ä–∞—Ü—é—î –Ω–∞ http://localhost:8081/query");
    }
}
